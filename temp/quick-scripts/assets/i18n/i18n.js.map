{"version":3,"sources":["i18n.js"],"names":["Polyglot","require","data","cc","sys","language","languageCode","toLowerCase","replace","polyglot","phrases","allowMissing","module","exports","init","lang","t","key","opt"],"mappings":";;;;;;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;;AAEA,IAAIC,aAAJ;AACA,IAAKC,GAAGC,GAAH,CAAOC,QAAP,KAAoB,IAAzB,EAAgC;AAC9B,MAAIC,eAAeH,GAAGC,GAAH,CAAOE,YAAP,CAAoBC,WAApB,EAAnB;AACAD,iBAAeA,aAAaE,OAAb,CAAqB,GAArB,EAAyB,GAAzB,CAAf;AACA,MAAKF,iBAAiB,IAAjB,IAAyBA,iBAAiB,OAA1C,IAAqDA,iBAAiB,SAAtE,IAAmFA,iBAAiB,QAAzG,EAAoH;AAClHJ,WAAOD,QAAQ,IAAR,CAAP;AACD,GAFD,MAEO;AACLC,WAAOD,QAAQ,OAAR,CAAP;AACD;AACF,CARD,MAQO;AACLC,SAAOD,QAAQ,IAAR,CAAP;AACD;AACD;AACA,IAAIQ,WAAW,IAAIT,QAAJ,CAAa,EAACU,SAASR,IAAV,EAAgBS,cAAc,IAA9B,EAAb,CAAf;;AAGAC,OAAOC,OAAP,GAAiB;AACb;;;;;;AAMAC,MAPa,gBAOPT,QAPO,EAOG;AACZU,WAAOV,QAAP;AACAH,WAAOG,aAAa,IAAb,GAAoBJ,QAAQ,IAAR,CAApB,GAAoCA,QAAQ,IAAR,CAA3C;AACAQ,aAASD,OAAT,CAAiBN,IAAjB;AACH,GAXY;;AAYb;;;;;;;;;;;;;;AAcAc,GA1Ba,aA0BVC,GA1BU,EA0BLC,GA1BK,EA0BA;AACT,WAAOT,SAASO,CAAT,CAAWC,GAAX,EAAgBC,GAAhB,CAAP;AACH;AA5BY,CAAjB","file":"i18n.js","sourceRoot":"../../../../assets/i18n","sourcesContent":["const Polyglot = require('polyglot');\n\nlet data;\nif ( cc.sys.language === 'zh' ) {\n  let languageCode = cc.sys.languageCode.toLowerCase();\n  languageCode = languageCode.replace(\"-\",\"_\")\n  if ( languageCode === 'zh' || languageCode === 'zh_cn' || languageCode === 'zh_hans' || languageCode === 'zh_chs' ) {\n    data = require('zh');\n  } else {\n    data = require('zh_tw');\n  }\n} else {\n  data = require('en');\n}\n// let polyglot = null;\nlet polyglot = new Polyglot({phrases: data, allowMissing: true});\n\n\nmodule.exports = {\n    /**\n     * This method allow you to switch language during runtime, language argument should be the same as your data file name\n     * such as when language is 'zh', it will load your 'zh.js' data source.\n     * @method init\n     * @param language - the language specific data file name, such as 'zh' to load 'zh.js'\n     */\n    init (language) {\n        lang = language;\n        data = language === 'zh' ? require('zh') : require('en');\n        polyglot.replace(data);\n    },\n    /**\n     * this method takes a text key as input, and return the localized string\n     * Please read https://github.com/airbnb/polyglot.js for details\n     * @method t\n     * @return {String} localized string\n     * @example\n     *\n     * var myText = i18n.t('MY_TEXT_KEY');\n     *\n     * // if your data source is defined as\n     * // {\"hello_name\": \"Hello, %{name}\"}\n     * // you can use the following to interpolate the text\n     * var greetingText = i18n.t('hello_name', {name: 'nantas'}); // Hello, nantas\n     */\n    t (key, opt) {\n        return polyglot.t(key, opt);\n    }\n};\n"]}